#version 330 core
out vec4 FragColor;
  
in vec3 Normal;
in vec3 FragPos;
uniform vec3 lightPos;
uniform vec3 viewPos;


void main()
{
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	vec3 objectColor = vec3(0.4, 0.1, 0.1);

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);

	//specular
	float specularStrength = 0.9;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);

	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;

	//diffuse
	float diffuseStrength = 0.8;
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diffuseStrength *diff * lightColor;

	//ambient
	float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

	vec3 result = (specular+ambient + diffuse) * objectColor;
	//vec3 result = (specular) * objectColor;

	FragColor = vec4(result, 1.0);
	//FragColor = vec4(lightDir, 1.0);
}