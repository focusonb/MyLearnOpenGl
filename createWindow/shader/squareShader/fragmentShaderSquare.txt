#version 330 core
out vec4 FragColor;
  
in vec3 Normal;
in vec3 FragPos;
uniform vec3 lightPos;
uniform vec3 viewPos;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
  
uniform Material material;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;  

void main()
{
	//vec3 lightColor = vec3(1.0, 1.0, 1.0);
	//vec3 objectColor = vec3(0.4, 0.1, 0.1);

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specularColor = spec * material.specular * light.specular;

	//diffuse
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuseColor = diff * material.diffuse * light.diffuse;

	//ambient
	float ambientStrength = 0.1;
    vec3 ambientColor = diff * material.ambient * light.ambient;

	vec3 result = specularColor + diffuseColor + ambientColor;
	//vec3 result = vec3(material.shininess,material.shininess,material.shininess);
	//vec3 result = material.specular;

	FragColor = vec4(result, 1.0);
}